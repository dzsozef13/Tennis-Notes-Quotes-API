swagger: "2.0"
info:
  version: "1.0.0"
  title: "Tennis Notes - Quotes API"
basePath: "/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

paths:
  # User registration endpoint
  /auth/register:
    post:
      tags:
        - "Users"
      summary: "Registers a new user"
      description: "Registers a new user with the specified name, email, and password."
      operationId: "registerUser"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be registered"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              email:
                type: "string"
              password:
                type: "string"
      responses:
        "200":
          description: "User registered successfully"
        "400":
          description: "Invalid input or user with email already exists"
        "500":
          description: "Server error"

  # User login endpoint
  /auth/login:
    post:
      tags:
        - "Users"
      summary: "Logs in a user"
      description: "Logs in a user with the specified email and password."
      operationId: "loginUser"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be logged in"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        "200":
          description: "User logged in successfully"
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              token:
                type: "string"
        "400":
          description: "Invalid input or email/password is incorrect"
        "500":
          description: "Server error"

  # Quotes endpoints
  /quote:
    post:
      tags:
        - "Quotes"
      summary: "Creates a new quote"
      description: "Creates a new quote with the specified content and author."
      operationId: "createQuote"
      security:
        - BearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Quote object that needs to be added"
          required: true
          schema:
            type: "object"
            properties:
              content:
                type: "string"
              author:
                type: "string"
      responses:
        "200":
          description: "Quote created successfully"
        "401":
          description: "Unauthorized"
        "500":
          description: "Server error"

    get:
      tags:
        - "Quotes"
      summary: "Gets all quotes"
      description: "Returns a list of all quotes."
      operationId: "getAllQuotes"
      parameters: []
      responses:
        "200":
          description: "List of all quotes"
          schema:
            type: "array"
        "500":
          description: "Server error"

    put:
      tags:
        - "Quotes"
      summary: "Updates a quote by ID"
      description: "Updates the specified quote with new content and/or author."
      operationId: "updateQuoteById"
      security:
        - BearerAuth: []
      parameters:
        - in: "path"
          name: "id"
          description: "ID of quote to update"

  /quote/author/{author}:
    get:
      tags:
        - "Quotes"
      summary: Get all quotes by author
      description: Get a list of all quotes by the specified author
      produces:
        - application/json
      parameters:
        - name: author
          description: Author name or part of name
          in: path
          required: true
          type: string
      responses:
        "200":
          description: "List of all quotes"
          schema:
            type: "array"